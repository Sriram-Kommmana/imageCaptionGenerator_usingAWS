import json
import boto3
import uuid
from botocore.exceptions import ClientError

BEDROCK_MODEL_ID = "anthropic.claude-3-sonnet-20240229-v1:0"
BEDROCK_REGION = "ap-south-1"  

rekognition = boto3.client("rekognition")
dynamodb = boto3.resource("dynamodb")
bedrock = boto3.client("bedrock-runtime", region_name=BEDROCK_REGION)

TABLE_NAME = "ImageCaptions"  
table = dynamodb.Table(TABLE_NAME)

def invoke_claude(prompt):
    """Call Claude 3 Sonnet via Bedrock"""
    payload = {
        "anthropic_version": "bedrock-2023-05-31",  
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 500
    }

    try:
        response = bedrock.invoke_model(
            modelId=BEDROCK_MODEL_ID,
            contentType="application/json",
            body=json.dumps(payload)
        )

        result = json.loads(response["body"].read())
        print("Bedrock raw response:", json.dumps(result, indent=2)) 

        if "content" in result and len(result["content"]) > 0:
            return " ".join([item.get("text", "") for item in result["content"] if item.get("type") == "text"])
        else:
            return "No caption returned"

    except ClientError as e:
        print(f"Bedrock error: {e}")
        return f"Error generating caption: {e}"

def lambda_handler(event, context):
    try:
        record = event['Records'][0]['s3']
        bucket = record['bucket']['name'].strip()
        key = record['object']['key'].strip()

        rekog_response = rekognition.detect_labels(
            Image={'S3Object': {'Bucket': bucket, 'Name': key}},
            MaxLabels=10,
            MinConfidence=70
        )
        labels = [label['Name'] for label in rekog_response['Labels']]
        labels_text = ", ".join(labels)

        prompt = f"Generate a short descriptive caption for an image with these elements: {labels_text}"

        caption = invoke_claude(prompt)

        caption_id = str(uuid.uuid4())

        table.put_item(
            Item={
                'ImageId': key,          
                'CaptionId': caption_id,  
                'Bucket': bucket,
                'Labels': labels,
                'Caption': caption
            }
        )

        return {
            "statusCode": 200,
            "body": json.dumps({
                "Labels": labels,
                "Caption": caption
            })
        }

    except Exception as e:
        print(f"Error: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
